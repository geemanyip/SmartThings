/**
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Name        : Retrieve Battery Levels
 *  Author      : Geeman Yip
 *  Date        : 2020-02-01
 *  Description : Manually retrieve the battery levels of specified devices
 *
 */
 
definition(
    name: "Retrieve Battery Levels",
    namespace: "geeman",
    author: "Geeman Yip",
    description: "Manually retrieve the battery levels of specified devices",
    category: "Convenience",
    iconUrl: "https://raw.githubusercontent.com/geemanyip/SmartThings/master/RetrieveBatteryLevels/icon60.png",
    iconX2Url: "https://raw.githubusercontent.com/geemanyip/SmartThings/master/RetrieveBatteryLevels/icon120.png"
)

preferences {
    section("About") {
        paragraph "Manually retrieve the battery levels of specified devices. To retrieve battery levels, toggle the enable/disable button for the SmartApp."
		input "debug", "bool", title: "Enable debug mode. Debug information will be sent as push notifications.", defaultValue: false, multiple: false, required: true
    }
	section("Settings") {
		input "devices", "capability.battery", title: "Select devices to retrieve battery level", multiple: true, required: false
		input "enabled", "bool", title: "Enable and save to retrieve battery levels now", defaultValue: false, multiple: false, required: true
	}
}

def log(msg) {
	if(debug) {
		def debugMsg = "DEBUG: ${msg}"
		sendPush(debugMsg)
	}
	
	log.debug msg
}

def installed() {
	log("installed()")
	
    subscribe()
}

def updated() {
	log("updated()")
	
    unsubscribe()	
    subscribe()
}

def subscribe() {
	log("subscribe()")
	
	// allow manually playing this app
	subscribe(app, appHandler)
	
	retrieveBatteryLevels()
}

def appHandler(evt) {
	log("appHandler()")
	
	retrieveBatteryLevels();
}

def retrieveBatteryLevels() {
	log("retrieveBatteryLevels()")
	
	// enumerate devices specified
	if(enabled && devices) {
		for(device in devices) {
			// retrieve current battery level
			def currentValue = device.currentValue("battery").toInteger()
			
			// send push notification of battery level
			def msg = "${device.displayName} battery level is ${currentValue}%"
			sendPush(msg)
		}
	}
}