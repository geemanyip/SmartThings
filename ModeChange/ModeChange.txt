/**
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Name        : Mode Change
 *  Author      : Geeman Yip
 *  Date        : 2020-02-07
 *  Description : Performs door actions and/or sends notifications when a mode has changed
 *
 */
 
definition(
    name: "Mode Change",
    namespace: "geeman",
    author: "Geeman Yip",
    description: "Performs door actions and/or sends notifications when a mode has changed",
    category: "Convenience",
    iconUrl: "https://raw.githubusercontent.com/geemanyip/SmartThings/master/ModeChange/Icon60.png",
    iconX2Url: "https://raw.githubusercontent.com/geemanyip/SmartThings/master/ModeChange/Icon120.png"
)

preferences {
    section("About") {
        paragraph "Locks or unlocks doors when a mode is changed in addition to sending notifications"
		input "debug", "bool", title: "Enable debug mode. Debug information will be sent as push notifications.", defaultValue: false, multiple: false, required: true
    }
	section("Devices to Monitor") {
		input "toMode", "mode", title: "Select the mode to execute actions when changed to mode", multiple: false, required: true
		input "unlockDevices", "capability.lock", title: "Select devices to unlock when changed to mode", multiple: true, required: false
		input "lockDevices", "capability.lock", title: "Select devices to lock when changed to mode", multiple: true, required: false
		input "modeMessageEnabled", "bool", title: "Send notification when changed to mode?", defaultValue: false, multiple: false, required: true
		input "modeMessage", "text", title: "Message to send when changed to mode", defaultValue: "", multiple: false, required: false
		input "routineEnabled", "bool", title: "Should a routine be executed when changed to mode?", defaultValue: false, multiple: false, required: true
		input "routineName", "text", title: "Name of routine to execute when changed to mode", defaultValue: "", multiple: false, required: false
	}
}

def log(msg) {
	if(debug) {
		def debugMsg = "DEBUG: ${msg}"
		sendPush(debugMsg)
	}
	
	log.debug msg
}

def installed() {
	log("installed()")
	
    subscribe()
}

def updated() {
	log("updated()")
	
    unsubscribe()
    subscribe()
}

def subscribe() {
	log("subscribe()")
	
	// subscribe location modes
	subscribe(location, "mode", modeChangeEvent)
	
	// initialize mode
	modeChange()
}

def modeChangeEvent(evt) {
	log("modeChangeEvent(): Current mode is ${location.mode}")
	modeChange()
}

def modeChange() {
	if(location.mode == toMode) {
		log("modeChange(): Executing mode actions")

		// unlock devices specified
		if(unlockDevices) {
			log("modeChange(): Unlocking devices")
			unlockDevices.unlock()
		}
		
		// lock devices specified. secure by default so we're
		// going to do this after lock action incase there is
		// overlap between the devices
		if(lockDevices) {
			log("modeChange(): Locking devices")
			lockDevices.lock()
		}
		
		// execute routine
		if(routineEnabled && routineName != null && routineName != "") {
			log("modeChange(): Executing routine ${routineName}")
			location.helloHome?.execute(routineName)
		}
				
		// send message
		if(modeMessageEnabled && modeMessage != null && modeMessage != "") {
			sendPush(modeMessage)
		}
	}
}
