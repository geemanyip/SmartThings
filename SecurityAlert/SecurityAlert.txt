/**
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Name        : Security Alert
 *  Author      : Geeman Yip
 *  Date        : 2020-02-13
 *  Description : Notifies you when events are triggered on selected devices
 *
 */
 
definition(
    name: "Security Alert",
    namespace: "geeman",
    author: "Geeman Yip",
    description: "Notifies you when events are triggered on selected devices",
    category: "Convenience",
    iconUrl: "https://raw.githubusercontent.com/geemanyip/SmartThings/master/SecurityAlert/icon60.png",
    iconX2Url: "https://raw.githubusercontent.com/geemanyip/SmartThings/master/SecurityAlert/icon120.png"
)

preferences {
    section("About") {
        paragraph "Select the sensors or devices to monitor. When an event is triggered, you will be send a notification with the device name and state."
		input "debug", "bool", title: "Enable debug mode. Debug information will be sent as push notifications.", defaultValue: false, multiple: false, required: true
    }
	section("Devices to Monitor") {
		input "contactDevicesOpened", "capability.contactSensor", title: "Select contact sensors to get notified when opened", multiple: true, required: false
		input "contactDevicesClosed", "capability.contactSensor", title: "Select contact sensors to get notified when closed", multiple: true, required: false
		input "motionDevicesActive", "capability.motionSensor", title: "Select motion sensors to get notified when motion detected", multiple: true, required: false
		input "motionDevicesInactive", "capability.motionSensor", title: "Select motion sensors to get notified when motion stops", multiple: true, required: false
		input "lockDevicesUnlocked", "capability.lock", title: "Select locks to get notified when unlocked", multiple: true, required: false
		input "lockDevicesLocked", "capability.lock", title: "Select locks to get notified when locked", multiple: true, required: false
		input "switchDevicesOn", "capability.switch", title: "Select switches to get notified when turned on", multiple: true, required: false
		input "switchDevicesOff", "capability.switch", title: "Select switches to get notified when turned off", multiple: true, required: false
	}
}

def log(msg) {
	if(debug) {
		def debugMsg = "DEBUG: ${msg}"
		sendPush(debugMsg)
	}
	
	log.debug msg
}

def installed() {
	log("installed()")
	
    subscribe()
}

def updated() {
	log("updated()")
	
    unsubscribe()
    subscribe()
}

def subscribe() {
	log("subscribe()")
	
	// subscribe to contact sensor events
	subscribe(contactDevicesOpened, "contact.open", contactEvent)
	subscribe(contactDevicesClosed, "contact.closed", contactEvent)
	
	// subscribe to motion sensor events
	subscribe(motionDevicesActive, "motion.active", motionEvent)
	subscribe(motionDevicesInactive, "motion.inactive", motionEvent)
	
	// subscribe to lockable device events
	subscribe(lockDevicesUnlocked, "lock.unlocked", lockEvent)
	subscribe(lockDevicesLocked, "lock.locked", lockEvent)
	
	// subscribe to switch device events
	subscribe(switchDevicesOn, "switch.on", switchEvent)
	subscribe(switchDevicesOff, "switch.off", switchEvent)
}

def contactEvent(evt) {
	log("contactEvent(): ${evt.displayName} changed to ${evt.value}")
	
	def msg = "${evt.displayName} was "
	switch(evt.value) {
		case "open":
			msg += "opened"
			break
			
		case "closed":
			msg += "closed"
			break
			
		default:
			msg += "${evt.value}"
			break;
	}
	sendPush(msg)
}

def motionEvent(evt) {
	log("motionEvent(): ${evt.displayName} changed to ${evt.value}")

	def msg = ""
	switch(evt.value) {
		case "active":
			msg = "Motion was detected by ${evt.displayName}"
			break
			
		case "inactive":
			msg = "Inactivity detected by ${evt.displayName}"
			break
			
		default:
			msg = "Unknown event was detected by ${evt.displayName}"
			break;
	}
	sendPush(msg)
}

def lockEvent(evt) {
	log("lockEvent(): ${evt.displayName} changed to ${evt.value}")

	def msg = "${evt.displayName} was "
	switch(evt.value) {
		case "locked":
			msg += "locked"
			break
			
		case "unlocked":
			msg += "unlocked"
			break
			
		default:
			msg += "${evt.value}"
			break;
	}
	sendPush(msg)
}

def switchEvent(evt) {
	log("switchEvent(): ${evt.displayName} changed to ${evt.value}")

	def msg = "${evt.displayName} was turned ${evt.value}"
	sendPush(msg)
}