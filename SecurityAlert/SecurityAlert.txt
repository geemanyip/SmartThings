/**
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Name        : Security Alert
 *  Author      : Geeman Yip
 *  Date        : 2020-02-01
 *  Description : Notifies you when events are triggered on selected devices
 *
 */
 
definition(
    name: "Security Alert",
    namespace: "geeman",
    author: "Geeman Yip",
    description: "Notifies you when events are triggered on selected devices",
    category: "Convenience",
    iconUrl: "https://raw.githubusercontent.com/geemanyip/SmartThings/master/SecurityAlert/icon60.png",
    iconX2Url: "https://raw.githubusercontent.com/geemanyip/SmartThings/master/SecurityAlert/icon120.png"
)

preferences {
    section("About") {
        paragraph "Select the contact sensors, motion sensors, or lockable devices to monitor. When an event is triggered, you will be send a notification with the device name and state."
		input "debug", "bool", title: "Enable debug mode. Debug information will be sent as push notifications.", defaultValue: false, multiple: false, required: true
    }
	section("Devices to Monitor") {
		input "contactDevices", "capability.contactSensor", title: "Select contact devices to monitor", multiple: true, required: false
		input "motionDevices", "capability.motionSensor", title: "Select motion devices to monitor", multiple: true, required: false
		input "lockDevices", "capability.lock", title: "Select locks to monitor", multiple: true, required: false
	}
}

def log(msg) {
	if(debug) {
		def debugMsg = "DEBUG: ${msg}"
		sendPush(debugMsg)
	}
	
	log.debug msg
}

def installed() {
	log("installed()")
	
    subscribe()
}

def updated() {
	log("updated()")
	
    unsubscribe()
    subscribe()
}

def subscribe() {
	log("subscribe()")
	
	// subscribe to contact sensor events
	subscribe(contactDevices, "contact", contactEvent)
	
	// subscribe to motion sensor events
	subscribe(motionDevices, "motion.active", motionEvent)
	
	// subscribe to lockable device events
	subscribe(lockDevices, "lock", lockEvent)
}

def contactEvent(evt) {
	log("contactEvent(): ${evt.displayName} changed to ${evt.value}")
	
	def msg = "${evt.displayName} was "
	switch($evt.value) {
		case "open":
			msg += "opened"
			break
			
		default:
			msg += "${evt.value}"
			break;
	}	
	sendPush(msg)
}

def motionEvent(evt) {
	log("motionEvent(): ${evt.displayName} changed to ${evt.value}")

	def msg = "Motion was detected by ${evt.displayName}"
	sendPush(msg)
}

def lockEvent(evt) {
	log("lockEvent(): ${evt.displayName} changed to ${evt.value}")

	def msg = "${evt.displayName} was ${evt.value}"
	sendPush(msg)
}