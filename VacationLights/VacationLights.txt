/**
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Name        : Vacation Lights
 *  Author      : Geeman Yip
 *  Date        : 2020-02-13
 *  Description : Automatically turns lights on or off while on vacation
 *
 */
 
definition(
    name: "Vacation Lights",
    namespace: "geeman",
    author: "Geeman Yip",
    description: "Automatically turns lights on or off while on vacation",
    category: "Convenience",
    iconUrl: "https://raw.githubusercontent.com/geemanyip/SmartThings/master/VacationLights/Icon60.png",
    iconX2Url: "https://raw.githubusercontent.com/geemanyip/SmartThings/master/VacationLights/Icon120.png"
)

preferences {
    section("About") {
        paragraph "Select the lights you wish to randomly turn on and specify the duration to leave them on before turning on different set of lights."
		input "debug", "bool", title: "Enable debug mode. Debug information will be sent as push notifications.", defaultValue: false, multiple: false, required: true
    }
	section("Lights") {
		input "mode", "mode", title: "Select the mode to enable", multiple: false, required: true
		input "switches", "capability.switch", title: "Select the lights you wish to randomly turn on", multiple: true, required: true
		input "brightness", "number", title: "Select light level of switches. Uses last setting of not specified. (only works on dimmer switches)", defaultValue: 100, multiple: false, required: true
		input "numberOfSwitches", "number", title: "Enter the number of switches to turn on", defaultValue: 1, multiple: false, required: true
        input "duration", "enum", title: "Select the number of minutes to leave them on for", defaultValue: "1 hour", options: ["1 minute", "5 minutes", "10 minutes", "15 minutes", "30 minutes", "1 hour", "3 hours"], multiple: false, required: true
	}
}

def log(msg) {
	if(debug) {
		def debugMsg = "DEBUG: ${msg}"
		sendPush(debugMsg)
	}
	
	log.debug msg
}

def installed() {
	log("installed()")
	
    subscribe()
}

def updated() {
	log("updated()")
	
    unsubscribe()
    subscribe()
}

def subscribe() {
	log("subscribe()")
	
    switch(duration) {
    	case "1 minute":
        	runEvery1Minute(checkMode)
        	break;
            
        case "5 minutes":
        	runEvery5Minutes(checkMode)
        	break;
            
        case "10 minutes":
        	runEvery10Minutes(checkMode)
        	break;
            
        case "15 minutes":
        	runEvery15Minutes(checkMode)
        	break;
            
        case "30 minutes":
        	runEvery30Minutes(checkMode)
        	break;
            
        case "1 hour":
        	runEvery1Hour(checkMode)
        	break;
            
        case "3 hours":
        	runEvery3Hours(checkMode)
        	break;
        
        default:
        	runEvery1Hour(checkMode)
        	break;
    }
    
    // run now
    checkMode()
}

def checkMode() {
	log("checkMode()")
	
	if(location.mode == mode) {
		log("checkMode(): enabled in mode")
        
        //def sunsetTime = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", location.currentValue("sunsetTime"))
        //def sunriseTime = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", location.currentValue("sunsetTime"))
        //def between = timeOfDayIsBetween(sunsetTime, sunriseTime, new Date(), location.timeZone)
        //if(between) {
        //	log("checkMode(): Between sunset (${sunsetTime}) and sunrise (${sunriseTime})")
			randomizeLights()		
        //} else {
        //	log("checkMode(): It's daytime")
        //}
	} else {
		log("checkMode(): Disabled in mode")

		// turn off switches
		//switches.off();
	}
}

def randomizeLights() {
	log("randomizeLights()")	
	
	// turn off switches to reset status
	switches.off();

	// turn on random switches
	for(int i=0; i<numberOfSwitches; i++) {
		Random rand = new Random()
		def pos = rand.nextInt(switches.size());
        def selectedSwitch = switches[pos]
        
        // turn on switch
		selectedSwitch.on()
		log("randomizeLights(): Turned on ${selectedSwitch.displayName} (${pos}/${switches.size()})")
		
        // change brightness
		if(brightness != null && brightness > 0 && brightness <= 100 && selectedSwitch.hasCommand("setLevel")) {
			log("randomizeLights(): ${selectedSwitch.displayName} is dimmable")
			selectedSwitch.setLevel(brightness)
		}
	}
}
